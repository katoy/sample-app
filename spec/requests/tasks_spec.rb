# frozen_string_literal: true

# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/tasks', type: :request do
  let(:user) { create :user }

  shared_examples :check_need_login do
    it 'return 302, before login' do
      send target_method, *target_url
      expect(response.status).to eq 302
    end

    it 'return 200' do
      sign_in user
      send target_method, *target_url
      expect(response.status).to eq target_status
    end
  end

  describe 'GET /index' do
    let(:target_method) { :get }
    let(:target_url) { [tasks_url] }
    let(:target_status) { 200 }
    let!(:task) { create :task }

    describe 'need login' do
      include_examples :check_need_login
    end

    describe 'after login' do
      it 'show name of latest task' do
        sign_in user
        get tasks_url
        expect(response.body).to include(Task.last.name)
      end
    end
  end

  describe 'GET /show' do
    let(:target_method) { :get }
    let(:target_url) { [task_url(task)] }
    let(:target_status) { 200 }
    let!(:task) { create :task }

    describe 'need login' do
      include_examples :check_need_login
    end

    describe 'after login' do
      before do
        sign_in user
        get task_url(task)
      end

      it 'renders a successful response' do
        expect(response.body).to include(task.name)
      end
    end
  end

  describe 'GET /new' do
    let(:target_method) { :get }
    let(:target_url) { [new_task_url] }
    let(:target_status) { 200 }

    describe 'need login' do
      include_examples :check_need_login
    end
  end

  describe 'GET /edit' do
    let(:target_method) { :get }
    let(:target_url) { [edit_task_url(task)] }
    let(:target_status) { 200 }
    let!(:task) { create :task }

    describe 'need login' do
      include_examples :check_need_login
    end

    describe 'after login' do
      before do
        sign_in user
        get edit_task_url(task)
      end

      it 'render a successful response' do
        expect(response.body).to include(task.name)
      end
    end
  end

  describe 'POST /create' do
    subject { post tasks_url, params: create_attributes }
    let(:create_attributes) { { task: { name: "#{task.name}_copy", status: true } } }
    let(:invalid_attributes) { { task: { name: '' } } }
    let(:target_method) { :patch }
    let(:target_url) { [task_url(task), { params: create_attributes }] }
    let(:target_status) { 302 }
    let!(:task) { create :task }

    describe 'need login' do
      include_examples :check_need_login
    end

    describe 'after login' do
      before { sign_in user }

      context 'with valid parameters' do
        it 'creates a new Task' do
          expect do
            subject
          end.to change(Task, :count).by(1)
        end

        it 'redirects to the created task' do
          subject
          expect(response).to redirect_to(task_url(Task.last))
        end
      end

      context 'with invalid parameters' do
        it 'does not create a new Task' do
          expect do
            post tasks_url, params: invalid_attributes
          end.to change(Task, :count).by(0)
        end

        it 'renders a successful response (i.e. to display the "new" template)' do
          post tasks_url, params: invalid_attributes
          expect(response.status).to eq 422
        end
      end
    end
  end

  describe 'PATCH /update' do
    subject { patch task_url(task), params: new_attributes }
    let(:update_attributes) { { task: { name: "#{task.name}_copy", status: true } } }
    let(:invalid_attributes) { { task: { name: '' } } }
    let(:target_method) { :patch }
    let(:target_url) { [task_url(task), { params: update_attributes }] }
    let(:target_status) { 302 }
    let!(:task) { create :task }

    describe 'need login' do
      include_examples :check_need_login
    end

    describe 'after login' do
      let(:new_attributes) { { task: { name: "#{task.name}_copy", status: true } } }
      let(:invalid_attributes) { { task: { name: '' } } }
      let!(:task) { create :task }

      before { sign_in user }

      context 'with valid parameters' do
        it 'updates the requested task' do
          subject
          task.reload
          expect(task.name).to eq new_attributes[:task][:name]
          expect(task.status).to eq new_attributes[:task][:status]
        end

        it 'redirects to the task' do
          subject
          expect(response).to redirect_to(task_url(task))
        end
      end

      context 'with invalid parameters' do
        it 'redirects to the task' do
          patch task_url(task), params: invalid_attributes
          expect(response.status).to eq 422
        end
      end
    end
  end

  describe 'DELETE /destroy' do
    let(:target_method) { :delete }
    let(:target_url) { [task_url(task)] }
    let(:target_status) { 302 }
    let!(:task) { create :task }

    describe 'need login' do
      include_examples :check_need_login
    end

    describe 'after login' do
      subject { delete task_url(task) }
      let!(:task) { create :task }
      before { sign_in user }

      it 'destroys the requested task' do
        expect do
          subject
        end.to change(Task, :count).by(-1)
        expect(Task.where(name: task.name)).to eq []
      end

      it 'redirects to the tasks list' do
        subject
        expect(response).to redirect_to(tasks_url)
      end
    end
  end
end
